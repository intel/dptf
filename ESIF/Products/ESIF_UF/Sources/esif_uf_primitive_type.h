/******************************************************************************
** Copyright (c) 2013-2022 Intel Corporation All Rights Reserved
**
** Licensed under the Apache License, Version 2.0 (the "License"); you may not
** use this file except in compliance with the License.
**
** You may obtain a copy of the License at
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
** WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
**
** See the License for the specific language governing permissions and
** limitations under the License.
**
******************************************************************************/

#pragma once

#include "esif_sdk.h"

/*
** This file is Autogenerated. Do not Edit.
*/

/* Lookup GET Primitive for Associated SET */
static ESIF_INLINE esif_primitive_type_t esif_primitive_type_set2get(esif_primitive_type_t type)
{
	static struct {
		esif_primitive_type_t setType;
		esif_primitive_type_t getType;
	}
	/* Sorted by SET enum value, not name */
	esif_primitive_type_map[] = {
		{ SET_TEMPERATURE_THRESHOLDS, GET_TEMPERATURE_THRESHOLDS },
		{ SET_RAPL_POWER_LIMIT, GET_RAPL_POWER_LIMIT },
		{ SET_DISPLAY_BRIGHTNESS_SOFT, GET_DISPLAY_BRIGHTNESS_SOFT },
		{ SET_TRIP_POINT_ACTIVE, GET_TRIP_POINT_ACTIVE },
		{ SET_TRIP_POINT_CRITICAL, GET_TRIP_POINT_CRITICAL },
		{ SET_TRIP_POINT_HOT, GET_TRIP_POINT_HOT },
		{ SET_TRIP_POINT_WARM, GET_TRIP_POINT_WARM },
		{ SET_TRIP_POINT_PASSIVE, GET_TRIP_POINT_PASSIVE },
		{ SET_RAPL_POWER_LIMIT_ENABLE, GET_RAPL_POWER_LIMIT_ENABLE },
		{ SET_PROC_LOGICAL_PROCESSOR_AFFINITY, GET_PROC_LOGICAL_PROCESSOR_AFFINITY },
		{ SET_TEMPERATURE_THRESHOLD_HYSTERESIS, GET_TEMPERATURE_THRESHOLD_HYSTERESIS },
		{ SET_TEMPERATURE, GET_TEMPERATURE },
		{ SET_PROC_PERF_PSTATE_DEPTH_LIMIT, GET_PROC_PERF_PSTATE_DEPTH_LIMIT },
		{ SET_PROC_PERF_TSTATE_DEPTH_LIMIT, GET_PROC_PERF_TSTATE_DEPTH_LIMIT },
		{ SET_PARTICIPANT_SAMPLE_PERIOD, GET_PARTICIPANT_SAMPLE_PERIOD },
		{ SET_DISPLAY_CAPABILITY, GET_DISPLAY_CAPABILITY },
		{ SET_DISPLAY_DEPTH_LIMIT, GET_DISPLAY_DEPTH_LIMIT },
		{ SET_PLATFORM_POWER_LIMIT, GET_PLATFORM_POWER_LIMIT },
		{ SET_PLATFORM_POWER_LIMIT_ENABLE, GET_PLATFORM_POWER_LIMIT_ENABLE },
		{ SET_PLATFORM_POWER_LIMIT_TIME_WINDOW, GET_PLATFORM_POWER_LIMIT_TIME_WINDOW },
		{ SET_PLATFORM_POWER_LIMIT_DUTY_CYCLE, GET_PLATFORM_POWER_LIMIT_DUTY_CYCLE },
		{ SET_RAPL_POWER_LIMIT_TIME_WINDOW, GET_RAPL_POWER_LIMIT_TIME_WINDOW },
		{ SET_RAPL_POWER_LIMIT_DUTY_CYCLE, GET_RAPL_POWER_LIMIT_DUTY_CYCLE },
		{ SET_PERF_PSTATE_DEPTH_LIMIT, GET_PERF_PSTATE_DEPTH_LIMIT },
		{ SET_DISPLAY_BRIGHTNESS, GET_DISPLAY_BRIGHTNESS },
		{ SET_PLATFORM_MAX_BATTERY_POWER, GET_PLATFORM_MAX_BATTERY_POWER },
		{ SET_PLATFORM_BATTERY_STEADY_STATE, GET_PLATFORM_BATTERY_STEADY_STATE },
		{ SET_POWER_ALPHA, GET_POWER_ALPHA },
		{ SET_POWER_SEED, GET_POWER_SEED },
		{ SET_POWER_DELTA, GET_POWER_DELTA },
		{ SET_LAST_POWER_USED, GET_LAST_POWER_USED },
		{ SET_LAST_EWMA_POWER, GET_LAST_EWMA_POWER },
		{ SET_AVOL, GET_AVOL },
		{ SET_ACUR, GET_ACUR },
		{ SET_AP01, GET_AP01 },
		{ SET_AP02, GET_AP02 },
		{ SET_AP10, GET_AP10 },
		{ SET_PLATFORM_REST_OF_POWER, GET_PLATFORM_REST_OF_POWER },
		{ SET_ADAPTER_POWER_RATING, GET_ADAPTER_POWER_RATING },
		{ SET_AC_PEAK_POWER, GET_AC_PEAK_POWER },
		{ SET_DC_PEAK_POWER, GET_DC_PEAK_POWER },
		{ SET_RAPL_POWER, GET_RAPL_POWER },
		{ SET_PID_KP_TERM, GET_PID_KP_TERM },
		{ SET_PID_KI_TERM, GET_PID_KI_TERM },
		{ SET_PID_TIME_AVERAGE_CONSTANT, GET_PID_TIME_AVERAGE_CONSTANT },
		{ SET_WEIGHTED_SLOWPOLL_CONSTANT, GET_WEIGHTED_SLOWPOLL_CONSTANT },
		{ SET_POWER_SHARE_TEMPERATURE_THRESHOLD, GET_POWER_SHARE_TEMPERATURE_THRESHOLD },
		{ SET_PARTICIPANT_UTILIZATION_THRESHOLD, GET_PARTICIPANT_UTILIZATION_THRESHOLD },
		{ SET_PARTICIPANT_ENERGY_THRESHOLD, GET_PARTICIPANT_ENERGY_THRESHOLD },
		{ SET_PARTICIPANT_RESIDENCY_UTILIZATION, GET_PARTICIPANT_RESIDENCY_UTILIZATION },
		{ SET_RAPL_ENERGY, GET_RAPL_ENERGY },
		{ SET_TCC_OFFSET, GET_TCC_OFFSET },
		{ SET_SLOWPOLL_POWER_THRESHOLD, GET_SLOWPOLL_POWER_THRESHOLD },
		{ SET_RFPROFILE_CENTER_FREQUENCY_MCIVR, GET_RFPROFILE_CENTER_FREQUENCY_MCIVR },
		{ SET_RFPROFILE_SSC_MCIVR, GET_RFPROFILE_SSC_MCIVR },
		{ SET_STANDBY_TEMPERATURE_SAMPLE_PERIOD, GET_STANDBY_TEMPERATURE_SAMPLE_PERIOD },
		{ SET_BATTERY_HIGH_FREQUENCY_IMPEDANCE, GET_BATTERY_HIGH_FREQUENCY_IMPEDANCE },
		{ SET_BATTERY_NO_LOAD_VOLTAGE, GET_BATTERY_NO_LOAD_VOLTAGE },
		{ SET_BATTERY_MAX_PEAK_CURRENT, GET_BATTERY_MAX_PEAK_CURRENT },
		{ SET_RFPROFILE_FIVR_RFI_XTAL_19_24, GET_RFPROFILE_FIVR_RFI_XTAL_19_24 },
		{ SET_RFPROFILE_CENTER_FREQUENCY_FIVR, GET_RFPROFILE_CENTER_FREQUENCY_FIVR },
		{ SET_RFPROFILE_SSC_FIVR, GET_RFPROFILE_SSC_FIVR },
		{ SET_RFPROFILE_FIVR_RFI_XTAL_38, GET_RFPROFILE_FIVR_RFI_XTAL_38 },
		{ SET_STORAGE_BUS_CONTROLLER_LOCATION, GET_STORAGE_BUS_CONTROLLER_LOCATION },
		{ SET_PORT, GET_PORT },
		{ SET_RAPL_FLOOR_STATE, GET_RAPL_FLOOR_STATE },
		{ SET_THERMAL_MBOX_DATA_REG, GET_THERMAL_MBOX_DATA_REG },
		{ SET_THERMAL_MBOX_CMD_REG, GET_THERMAL_MBOX_CMD_REG },
		{ SET_SUPPORT_EPP_HINT, GET_SUPPORT_EPP_HINT },
		{ SET_SOCWC_AC_POLLING_PERIOD, GET_SOCWC_AC_POLLING_PERIOD },
		{ SET_SOCWC_DC_POLLING_PERIOD, GET_SOCWC_DC_POLLING_PERIOD },
		{ SET_SOCWC_SLOW_POLLING_PERIOD, GET_SOCWC_SLOW_POLLING_PERIOD },
		{ SET_EPP_SENSITIVITY_HINT, GET_EPP_SENSITIVITY_HINT },
		{ SET_BASELINE_SSC_SPREAD_VALUE, GET_BASELINE_SSC_SPREAD_VALUE },
		{ SET_BASELINE_SSC_THRESHOLD, GET_BASELINE_SSC_THRESHOLD },
		{ SET_BASELINE_SSC_GUARD_BAND, GET_BASELINE_SSC_GUARD_BAND },
		{ SET_POWER_SHARE_POLICY_POWER, GET_POWER_SHARE_POLICY_POWER },
		{ SET_POWER_SHARE_EFFECTIVE_BIAS, GET_POWER_SHARE_EFFECTIVE_BIAS },
		{ SET_BATTERY_PERCENTAGE, GET_BATTERY_PERCENTAGE },
		{ SET_UVTH, GET_UVTH },
		{ SET_POSITIVE_EVENT_FILTERING_STATE, GET_POSITIVE_EVENT_FILTERING_STATE },
		{ SET_NEGATIVE_EVENT_FILTERING_STATE, GET_NEGATIVE_EVENT_FILTERING_STATE },
		{ SET_PRESENT_STABILITY_WINDOW, GET_PRESENT_STABILITY_WINDOW },
		{ SET_DISENGAGED_STABILITY_WINDOW, GET_DISENGAGED_STABILITY_WINDOW },
		{ SET_NOT_PRESENT_STABILITY_WINDOW, GET_NOT_PRESENT_STABILITY_WINDOW },
		{ SET_FAN_DIRECTION, GET_FAN_DIRECTION },
		{ SET_EXPECTED_BATTERY_LIFE, GET_EXPECTED_BATTERY_LIFE },
		{ SET_AGGRESSIVENESS_LEVEL, GET_AGGRESSIVENESS_LEVEL },
		{ SET_BIOMETRIC_PRESENCE_SENSOR_INSTANCE, GET_BIOMETRIC_PRESENCE_SENSOR_INSTANCE },
		{ SET_SOCWC_POWER_DIFFS_COUNT_THRESHOLD, GET_SOCWC_POWER_DIFFS_COUNT_THRESHOLD },
		{ SET_EPP_BATTERY_LIFE_BURSTY_THRESHOLD, GET_EPP_BATTERY_LIFE_BURSTY_THRESHOLD },
		{ SET_MBT_MODEL_VERSION, GET_MBT_MODEL_VERSION },
		{ SET_THERMAL_MBOX_DATA_REG_HI, GET_THERMAL_MBOX_DATA_REG_HI },
		{ SET_PERF_PREFERENCE_MAX, GET_PERF_PREFERENCE_MAX },
		{ SET_PERF_PREFERENCE_MIN, GET_PERF_PREFERENCE_MIN },
		{ SET_DYNAMIC_BOOST_STATE, GET_DYNAMIC_BOOST_STATE },
		{ SET_DYNAMIC_BOOST_STATE_SUR, GET_DYNAMIC_BOOST_STATE_SUR },
		{ SET_RAPL_POWER_LIMIT_SUR, GET_RAPL_POWER_LIMIT_SUR },
		{ SET_USER_BASED_REFRESH_RATE, GET_USER_BASED_REFRESH_RATE },
		{ SET_USER_BASED_REFRESH_RATE_SUR, GET_USER_BASED_REFRESH_RATE_SUR },
		{ SET_PERF_PREFERENCE_SUR, GET_PERF_PREFERENCE_SUR },
		{ SET_FAN_OPERATING_MODE, GET_FAN_OPERATING_MODE },
	};

	/* Match SET using a Binary Search */
	int start = 0, end = ESIF_ARRAY_LEN(esif_primitive_type_map) - 1, node = ESIF_ARRAY_LEN(esif_primitive_type_map) / 2;
	while (start <= end) {
		int comp = (type < esif_primitive_type_map[node].setType ? -1 : type > esif_primitive_type_map[node].setType ? 1 : 0);
		if (comp == 0) {
			return esif_primitive_type_map[node].getType;
		}
		else if (comp > 0) {
			start = node + 1;
		}
		else {
			end = node - 1;
		}
		node = (end - start) / 2 + start;
	}
	return (esif_primitive_type_t)0;
}

/* Lookup SET Primitive for Associated GET */
static ESIF_INLINE esif_primitive_type_t esif_primitive_type_get2set(esif_primitive_type_t type)
{
	static struct {
		esif_primitive_type_t getType;
		esif_primitive_type_t setType;
	}
	/* Sorted by GET enum value, not name */
	esif_primitive_type_map[] = {
		{ GET_TRIP_POINT_ACTIVE, SET_TRIP_POINT_ACTIVE },
		{ GET_TRIP_POINT_PASSIVE, SET_TRIP_POINT_PASSIVE },
		{ GET_TRIP_POINT_HOT, SET_TRIP_POINT_HOT },
		{ GET_TRIP_POINT_CRITICAL, SET_TRIP_POINT_CRITICAL },
		{ GET_TEMPERATURE, SET_TEMPERATURE },
		{ GET_TEMPERATURE_THRESHOLD_HYSTERESIS, SET_TEMPERATURE_THRESHOLD_HYSTERESIS },
		{ GET_RAPL_POWER, SET_RAPL_POWER },
		{ GET_RAPL_POWER_LIMIT, SET_RAPL_POWER_LIMIT },
		{ GET_PROC_PERF_PSTATE_DEPTH_LIMIT, SET_PROC_PERF_PSTATE_DEPTH_LIMIT },
		{ GET_PROC_PERF_TSTATE_DEPTH_LIMIT, SET_PROC_PERF_TSTATE_DEPTH_LIMIT },
		{ GET_PERF_PSTATE_DEPTH_LIMIT, SET_PERF_PSTATE_DEPTH_LIMIT },
		{ GET_RAPL_POWER_LIMIT_ENABLE, SET_RAPL_POWER_LIMIT_ENABLE },
		{ GET_RAPL_ENERGY, SET_RAPL_ENERGY },
		{ GET_TEMPERATURE_THRESHOLDS, SET_TEMPERATURE_THRESHOLDS },
		{ GET_DISPLAY_BRIGHTNESS_SOFT, SET_DISPLAY_BRIGHTNESS_SOFT },
		{ GET_DISPLAY_CAPABILITY, SET_DISPLAY_CAPABILITY },
		{ GET_DISPLAY_DEPTH_LIMIT, SET_DISPLAY_DEPTH_LIMIT },
		{ GET_TRIP_POINT_WARM, SET_TRIP_POINT_WARM },
		{ GET_PROC_LOGICAL_PROCESSOR_AFFINITY, SET_PROC_LOGICAL_PROCESSOR_AFFINITY },
		{ GET_PLATFORM_MAX_BATTERY_POWER, SET_PLATFORM_MAX_BATTERY_POWER },
		{ GET_PLATFORM_BATTERY_STEADY_STATE, SET_PLATFORM_BATTERY_STEADY_STATE },
		{ GET_ADAPTER_POWER_RATING, SET_ADAPTER_POWER_RATING },
		{ GET_PLATFORM_REST_OF_POWER, SET_PLATFORM_REST_OF_POWER },
		{ GET_PARTICIPANT_SAMPLE_PERIOD, SET_PARTICIPANT_SAMPLE_PERIOD },
		{ GET_PLATFORM_POWER_LIMIT, SET_PLATFORM_POWER_LIMIT },
		{ GET_PLATFORM_POWER_LIMIT_ENABLE, SET_PLATFORM_POWER_LIMIT_ENABLE },
		{ GET_PLATFORM_POWER_LIMIT_TIME_WINDOW, SET_PLATFORM_POWER_LIMIT_TIME_WINDOW },
		{ GET_PLATFORM_POWER_LIMIT_DUTY_CYCLE, SET_PLATFORM_POWER_LIMIT_DUTY_CYCLE },
		{ GET_RAPL_POWER_LIMIT_TIME_WINDOW, SET_RAPL_POWER_LIMIT_TIME_WINDOW },
		{ GET_RAPL_POWER_LIMIT_DUTY_CYCLE, SET_RAPL_POWER_LIMIT_DUTY_CYCLE },
		{ GET_DISPLAY_BRIGHTNESS, SET_DISPLAY_BRIGHTNESS },
		{ GET_POWER_ALPHA, SET_POWER_ALPHA },
		{ GET_POWER_SEED, SET_POWER_SEED },
		{ GET_POWER_DELTA, SET_POWER_DELTA },
		{ GET_LAST_POWER_USED, SET_LAST_POWER_USED },
		{ GET_LAST_EWMA_POWER, SET_LAST_EWMA_POWER },
		{ GET_AVOL, SET_AVOL },
		{ GET_ACUR, SET_ACUR },
		{ GET_AP01, SET_AP01 },
		{ GET_AP02, SET_AP02 },
		{ GET_AP10, SET_AP10 },
		{ GET_PORT, SET_PORT },
		{ GET_PARTICIPANT_RESIDENCY_UTILIZATION, SET_PARTICIPANT_RESIDENCY_UTILIZATION },
		{ GET_AC_PEAK_POWER, SET_AC_PEAK_POWER },
		{ GET_DC_PEAK_POWER, SET_DC_PEAK_POWER },
		{ GET_PID_KP_TERM, SET_PID_KP_TERM },
		{ GET_PID_KI_TERM, SET_PID_KI_TERM },
		{ GET_PID_TIME_AVERAGE_CONSTANT, SET_PID_TIME_AVERAGE_CONSTANT },
		{ GET_WEIGHTED_SLOWPOLL_CONSTANT, SET_WEIGHTED_SLOWPOLL_CONSTANT },
		{ GET_POWER_SHARE_TEMPERATURE_THRESHOLD, SET_POWER_SHARE_TEMPERATURE_THRESHOLD },
		{ GET_PARTICIPANT_UTILIZATION_THRESHOLD, SET_PARTICIPANT_UTILIZATION_THRESHOLD },
		{ GET_PARTICIPANT_ENERGY_THRESHOLD, SET_PARTICIPANT_ENERGY_THRESHOLD },
		{ GET_TCC_OFFSET, SET_TCC_OFFSET },
		{ GET_SLOWPOLL_POWER_THRESHOLD, SET_SLOWPOLL_POWER_THRESHOLD },
		{ GET_RFPROFILE_CENTER_FREQUENCY_MCIVR, SET_RFPROFILE_CENTER_FREQUENCY_MCIVR },
		{ GET_RFPROFILE_SSC_MCIVR, SET_RFPROFILE_SSC_MCIVR },
		{ GET_STANDBY_TEMPERATURE_SAMPLE_PERIOD, SET_STANDBY_TEMPERATURE_SAMPLE_PERIOD },
		{ GET_BATTERY_HIGH_FREQUENCY_IMPEDANCE, SET_BATTERY_HIGH_FREQUENCY_IMPEDANCE },
		{ GET_BATTERY_NO_LOAD_VOLTAGE, SET_BATTERY_NO_LOAD_VOLTAGE },
		{ GET_BATTERY_MAX_PEAK_CURRENT, SET_BATTERY_MAX_PEAK_CURRENT },
		{ GET_RFPROFILE_FIVR_RFI_XTAL_19_24, SET_RFPROFILE_FIVR_RFI_XTAL_19_24 },
		{ GET_RFPROFILE_CENTER_FREQUENCY_FIVR, SET_RFPROFILE_CENTER_FREQUENCY_FIVR },
		{ GET_RFPROFILE_SSC_FIVR, SET_RFPROFILE_SSC_FIVR },
		{ GET_RFPROFILE_FIVR_RFI_XTAL_38, SET_RFPROFILE_FIVR_RFI_XTAL_38 },
		{ GET_STORAGE_BUS_CONTROLLER_LOCATION, SET_STORAGE_BUS_CONTROLLER_LOCATION },
		{ GET_RAPL_FLOOR_STATE, SET_RAPL_FLOOR_STATE },
		{ GET_THERMAL_MBOX_DATA_REG, SET_THERMAL_MBOX_DATA_REG },
		{ GET_THERMAL_MBOX_CMD_REG, SET_THERMAL_MBOX_CMD_REG },
		{ GET_SUPPORT_EPP_HINT, SET_SUPPORT_EPP_HINT },
		{ GET_SOCWC_AC_POLLING_PERIOD, SET_SOCWC_AC_POLLING_PERIOD },
		{ GET_SOCWC_DC_POLLING_PERIOD, SET_SOCWC_DC_POLLING_PERIOD },
		{ GET_SOCWC_SLOW_POLLING_PERIOD, SET_SOCWC_SLOW_POLLING_PERIOD },
		{ GET_EPP_SENSITIVITY_HINT, SET_EPP_SENSITIVITY_HINT },
		{ GET_BASELINE_SSC_SPREAD_VALUE, SET_BASELINE_SSC_SPREAD_VALUE },
		{ GET_BASELINE_SSC_THRESHOLD, SET_BASELINE_SSC_THRESHOLD },
		{ GET_BASELINE_SSC_GUARD_BAND, SET_BASELINE_SSC_GUARD_BAND },
		{ GET_POWER_SHARE_POLICY_POWER, SET_POWER_SHARE_POLICY_POWER },
		{ GET_POWER_SHARE_EFFECTIVE_BIAS, SET_POWER_SHARE_EFFECTIVE_BIAS },
		{ GET_BATTERY_PERCENTAGE, SET_BATTERY_PERCENTAGE },
		{ GET_UVTH, SET_UVTH },
		{ GET_POSITIVE_EVENT_FILTERING_STATE, SET_POSITIVE_EVENT_FILTERING_STATE },
		{ GET_NEGATIVE_EVENT_FILTERING_STATE, SET_NEGATIVE_EVENT_FILTERING_STATE },
		{ GET_PRESENT_STABILITY_WINDOW, SET_PRESENT_STABILITY_WINDOW },
		{ GET_DISENGAGED_STABILITY_WINDOW, SET_DISENGAGED_STABILITY_WINDOW },
		{ GET_NOT_PRESENT_STABILITY_WINDOW, SET_NOT_PRESENT_STABILITY_WINDOW },
		{ GET_FAN_DIRECTION, SET_FAN_DIRECTION },
		{ GET_EXPECTED_BATTERY_LIFE, SET_EXPECTED_BATTERY_LIFE },
		{ GET_AGGRESSIVENESS_LEVEL, SET_AGGRESSIVENESS_LEVEL },
		{ GET_BIOMETRIC_PRESENCE_SENSOR_INSTANCE, SET_BIOMETRIC_PRESENCE_SENSOR_INSTANCE },
		{ GET_SOCWC_POWER_DIFFS_COUNT_THRESHOLD, SET_SOCWC_POWER_DIFFS_COUNT_THRESHOLD },
		{ GET_EPP_BATTERY_LIFE_BURSTY_THRESHOLD, SET_EPP_BATTERY_LIFE_BURSTY_THRESHOLD },
		{ GET_MBT_MODEL_VERSION, SET_MBT_MODEL_VERSION },
		{ GET_THERMAL_MBOX_DATA_REG_HI, SET_THERMAL_MBOX_DATA_REG_HI },
		{ GET_PERF_PREFERENCE_MAX, SET_PERF_PREFERENCE_MAX },
		{ GET_PERF_PREFERENCE_MIN, SET_PERF_PREFERENCE_MIN },
		{ GET_DYNAMIC_BOOST_STATE, SET_DYNAMIC_BOOST_STATE },
		{ GET_DYNAMIC_BOOST_STATE_SUR, SET_DYNAMIC_BOOST_STATE_SUR },
		{ GET_RAPL_POWER_LIMIT_SUR, SET_RAPL_POWER_LIMIT_SUR },
		{ GET_USER_BASED_REFRESH_RATE, SET_USER_BASED_REFRESH_RATE },
		{ GET_USER_BASED_REFRESH_RATE_SUR, SET_USER_BASED_REFRESH_RATE_SUR },
		{ GET_PERF_PREFERENCE_SUR, SET_PERF_PREFERENCE_SUR },
		{ GET_FAN_OPERATING_MODE, SET_FAN_OPERATING_MODE },
	};

	/* Match Assocated GET using a Binary Search */
	int start = 0, end = ESIF_ARRAY_LEN(esif_primitive_type_map) - 1, node = ESIF_ARRAY_LEN(esif_primitive_type_map) / 2;
	while (start <= end) {
		int comp = (type < esif_primitive_type_map[node].getType ? -1 : type > esif_primitive_type_map[node].getType ? 1 : 0);
		if (comp == 0) {
			return esif_primitive_type_map[node].setType;
		}
		else if (comp > 0) {
			start = node + 1;
		}
		else {
			end = node - 1;
		}
		node = (end - start) / 2 + start;
	}
	return (esif_primitive_type_t)0;
}
